/**
* Define container configuration for o-message
*
* @access public
**/

@mixin oMessageContainer () {
	@include oTypographySans($scale: 0);
	
	display: flex;
	align-items: center;
	justify-content: flex-start;
	height: 100%;
	white-space: nowrap;
	// sass-lint:disable no-vendor-prefixes
	-webkit-font-smoothing: antialiased;
	// sass-lint:enable no-vendor-prefixes
}

/**
* Define button configuration for o-message
*
* @access private
**/

@mixin _oMessageButtonBase () {
	@include oButtons();
	@include oTypographySans($scale: -1);
}

/**
* Gets close icon of specific color
*
* @access private
* @param {color} $color
**/

@mixin _oMessageCloseButton ($color) {
	@include oIconsGetIcon('cross', $color, 20);
}

/**
* Creates a icon with specific parametrs
*
* @access private
* @param {string} $icon-name
* @param {string} $icon-color
* @param {number} $icon-size
**/

@mixin _oMessageAlertIcon ($icon-name, $icon-color, $icon-size) {
	content: '';
	@include oIconsGetIcon(
		$icon-name,
		$icon-color,
		$icon-size
	);
}

/**
* Sets up content of o-message alert
*
* @access public
**/

@mixin oMessageAlertContent () {
	@include oTypographyMargin($top: 0, $bottom: 0);
	display: flex;
	align-items: center;

	&--highlight {
		@include oTypographySansBold($scale: 0);
		padding-right: oTypographySpacingSize(2);
	}
}

/**
* Sets up theme for o-message alert button
*
* @access public
* @param {background} $background
* @param {string} $text
**/

@mixin _oMessageAlertButtonTheme ($background, $text) {
	@include oButtonsCustomTheme($background, $text);
}

/**
* Sets up base for o-message alert button
*
* @access public
**/

@mixin oMessageAlertButtonBase () {
	@include _oMessageButtonBase;
	margin: oTypographySpacingSize(6);
}

/**
* Sets up style for o-message alert link
*
* @access public
* @param {link} $custom-link-base
* @param {string} $text
* @param {link} $custom-link-base
* @param {link} $custom-link-hover
* @param {background} $custom-link-background
* @param {link} $link-hover
* @param {link} $link-focus
**/

@mixin oMessageAlertLink ($custom-link-base, $custom-link-hover, $custom-link-background, $link-hover, $link-focus) {
	@include oTypographyLinkCustom(
		$custom-link-base,
		$custom-link-hover,
		$custom-link-background
	);
	
	&:hover {
		border-bottom-color: $link-hover; // is different to custom link hover by design.
	}
	
	&:focus {
		outline: 3px solid $link-focus;
		border-bottom-color: transparent;
	}
}

/**
* Sets up grid for o-message alert
*
* @access public
**/

@mixin oMessageAlertGrid () {
	@include oGridContainer();
	@include oGridRespondTo($from: S) {
		padding: oGridGutter();
	}
}

/**
* Sets up base for o-message alert
*
* @access public
* @param {string = 'o-message'} $class
**/

@mixin oMessageAlertBase($class: 'o-message') {
	.#{$class}--alert,
	.#{$class}--alert--bleed {
		height: $_o-message-alert-height;
	}
	
	.#{$class}__container {
		@include oMessageContainer;
		
		.#{$class}--alert--bleed & {
			@include oMessageAlertGrid;
		}
		
		.#{$class}__content {
			@include oMessageAlertContent;
		}
	}
	
	.#{$class}__button {
		@include oMessageAlertButtonBase;
	}
	
	.#{$class}__close {
		margin-left: auto;
	}
	
	.#{$class}--closed {
		display: none;
	}
	
	.#{$class}--alert {
		@include oMessageAlertGrid;

		@include oGridRespondTo($until: S) {
			.#{$class}__action--secondary {
				display: none;
			}
		};
	
		@include oGridRespondTo($until: M) {
			.#{$class}__content--detail {
				display: none;
			}
		};
	}
}

/**
* Sets up base for o-message alert--inline
*
* @access public
* @param {string = 'o-message'} $class
**/

@mixin oMessageAlertInlineBase($class: 'o-message') {
	@include oMessageAlertBase($class);

	.#{$class}--alert--inline {
		max-width: $_o-message-inline-alert-width;
		margin: auto;
		height: auto;
		padding-bottom: oTypographySpacingSize(2);

		.#{$class}__container {
			display: inline-block;
		}

		.#{$class}__content {
			max-width: $_o-message-inline-alert-content-width;
			white-space: normal;
			flex-flow: wrap;

			.#{$class}__content--detail {
				max-width: $_o-message-inline-alert-content-text-width;
			}

			.#{$class}__content--additional-info {
				margin-left: oTypographySpacingSize(10);
				max-width: $_o-message-inline-alert-content-text-width;
				margin-top: oTypographySpacingSize(0);
			}
		}

		.#{$class}__button {
			@include _oMessageButtonBase;
			margin: 0 oTypographySpacingSize(6) oTypographySpacingSize(2) oTypographySpacingSize(10);
		}

		.#{$class}__link {
			vertical-align: text-bottom;
		}
	}
}

/**
* Sets up styles for different themese of o-message alert
*
* @access public
* @param {string} $theme
* @param {string = 'o-message'} $class
**/

@mixin oMessageFor ($theme, $class: 'o-message') {
	@if map-has-key($theme-styles, $theme) {
		.#{$class}--alert-#{$theme} {
			@include oColorsFor(o-message-alert-#{$theme});

			.#{$class}__link {
				@include oMessageAlertLink(
					$custom-link-base: _oMessageGetMapValue($theme, custom-link-base),
					$custom-link-hover: _oMessageGetMapValue($theme, custom-link-hover),
					$custom-link-background: _oMessageGetMapValue($theme, custom-link-background),
					$link-hover: _oMessageGetMapValue($theme, link-hover),
					$link-focus: _oMessageGetMapValue($theme, link-focus)
				);
			}

			.#{$class}__button {
				@include _oMessageAlertButtonTheme(_oMessageGetMapValue($theme, button-background), _oMessageGetMapValue($theme, button-text));
			}

			.#{$class}__content:before {
				// hack mchackerson:
				// all of these conditionals really need to _not_ be the case with the icons,
				// so we are waiting on new icons from James

				@if $theme == error or $theme == success {
					@include _oMessageAlertIcon(
						_oMessageGetMapValue($theme, alert-icon-name),
						_oMessageGetMapValue($theme, alert-icon-text),
						_oMessageGetMapValue($theme, alert-icon-size)
					);
				}

				@if $theme == error or $theme == neutral {
					padding: 1px;
					background-color: _oMessageGetMapValue($theme, alert-icon-background);
					border-radius: 50%;
					margin: 10px;
				}

				@if $theme == neutral {
					@include oTypographySansBold(0);
					content: 'i';
					color: _oMessageGetMapValue($theme, alert-icon-text);
					background-color: _oMessageGetMapValue($theme, alert-icon-background);
					padding: 2px 10px;
				}
			}

			.#{$class}__close {
				@include _oMessageCloseButton(_oMessageGetMapValue($theme, close-icon-color));
			}
		}

	} @else {
		@return _oMessageError('#{$theme} is not a theme. You can try error, success or neutral, instead.');
	}
}
