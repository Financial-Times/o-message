@import 'o-buttons/main';
@import 'o-colors/main';
@import 'o-icons/main';
@import 'o-typography/main';

@import './src/scss/color-use-cases';
@import './src/scss/brand';
@import './src/scss/mixins';
@import './src/scss/variables';

@import './src/scss/base';
@import './src/scss/states';

@import './src/scss/inner';

@import './src/scss/alert';
@import './src/scss/notice';
@import './src/scss/action';


@mixin oMezzage(
	$types: ('action', 'alert', 'notice'),
	$states: ('error', 'success', 'inform', 'inform-inverse','warning', 'warning-light'),
	$layouts: ('inner', 'bleed')) {

	@each $layout in $layouts {
		@if $layout == 'inner' {
			@include _oMessageInner($types);
		} @elseif $layout == 'bleed' {
			//bloooood
		} @else {
			//shrug
		}
	}
}

/// Output All oMessage Features
/// @param {list} $types [('all, ''action', 'alert', 'alert-bleed', 'alert-inner', 'notice', 'notice-bleed', 'notice-inner')]
/// @param {list} $status [('all', 'error', 'success', 'inform', 'warning', 'warning-light')]
@mixin oMessage($types: 'all', $status: 'all') {
	@each $type in $types {
		@if $type == 'all' {
			@include _oMessageAlerts($type, $status);
			@include _oMessageNotices($type, $status);
			@include _oMessageActions($type, $status);

		} @else if index($o-message-alert-types, $type) {
			@include _oMessageAlerts($type, $status);

		} @else if index($o-message-notice-types, $type) {
			@include _oMessageNotices($type, $status);

		} @else if index($o-message-action-types, $type) {
			@include _oMessageActions($type, $status);

		} @else {
			@include _oMessageError("o-message types don't support #{$type}.
			The available types are:
			- action
			- alert
			- alert-bleed
			- alert-inner
			- notice
			- notice-bleed
			- notice-inner");
		}
	}
}

@if ($o-message-is-silent == false) {
	@include oMessage();

	// Set to silent again to avoid being output twice
	$o-message-is-silent: true !global;
}
